import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

action code {:
	Variable var = new Variable(0,0);

	/* Casting flags */
	boolean flagFloat = false;
:}

parser code {:
    @Override
    public void report_error(String message, Object info){ // Syntax error handling message
        Generador.error();
	Generador.halt();
    }
:}

/* Terminales */

terminal 		INT;
terminal 		FLOAT;
terminal 		AC, CC;
terminal 		PYC, COMA, POR, AL, CL, ASIG, AP, CP, DOSPUNTOS;
terminal String 	IF, ELSE;
terminal 		PRINT;
terminal String 	DO, WHILE;
terminal String		TO, STEP, DOWNTO, IN;
terminal String 	FOR;
terminal 		MASMAS;
terminal 		MENOSMENOS;
terminal 		MAS, MENOS, NOT, DIV, MOD, UMINUS;
terminal 		MEQ, MAQ, MEOQ, MAOQ;
terminal 		EQ, NEQ;
terminal 		AND;
terminal 		OR;

terminal Integer 	NUMERO;
terminal Double 	NUMEROF;
terminal String 	IDENT;

/* No terminales */

non terminal 		listaSent;
non terminal 		sent;
non terminal 		elsePart;
non terminal Tag 	cond;
non terminal 		listaDec;
non terminal 		dec;
non terminal 		tipo;
non terminal String 	forInIdent;
non terminal Object 	forArray;
non terminal List<String> arrayIni;
non terminal List<Integer> dimensiones;
non terminal String dimensionesAsig;
non terminal String 	incremento;
non terminal String	variable, numero;
non terminal String	asig;
non terminal String	casting;
non terminal String 	exp, stepPart;

/* Precedencia */

precedence left 	COMA;
precedence right	ASIG;
precedence left  	MAS, MENOS;
precedence left  	POR, DIV, MOD;
precedence left  	UMINUS;
precedence left  	AND, OR;
precedence left  	ELSE;
precedence right 	NOT;


/* Gramatica */

listaSent	::=	sent
		|	listaSent sent
		;


sent		::=			exp:e PYC			{: :}

			|			IF:tagIf AP cond:c CP 		{: 
														Generador.label(c.getV());
													:}
			
						sent						{:
														Generador.goTo(tagIf);
														Generador.label(c.getF());
													:}

						elsePart					{:
														Generador.label(tagIf);
													:}

			|			WHILE:tagWhile AP			{:
														Generador.label(tagWhile);
													:}

						cond:c CP					{:
														Generador.label(c.getV());
													:}

						sent						{:
														Generador.goTo(tagWhile);
														Generador.label(c.getF());
													:}

			|			DO:tagDo					{:
														Generador.label(tagDo);
													:}

						sent						{: :}

						WHILE AP cond:c CP PYC		{:
														Generador.label(c.getV());
														Generador.goTo(tagDo);
														Generador.label(c.getF());
													:}

			|			FOR:tagFor AP exp:e1 PYC	{:
														Generador.label(tagFor);
													:}

						cond:c1 PYC					{:
														RESULT = Generador.getTag();
														Generador.label(RESULT.toString());
													:}

						exp:e2 CP					{:
														Generador.goTo(tagFor);
														Generador.label(c1.getV());
													:}

								sent				{:
														Generador.goTo(RESULT.toString());
														Generador.label(c1.getF());
													:}

			|			FOR:tagFor exp:e1			{:
								
													:}

						TO:tagTo exp:e2				{:
														Generador.label(tagFor);
														RESULT = Generador.condition(e2, Tag.MEQ, e1);
														Generador.label(tagTo);
													:}

						stepPart:p DO				{:
														Generador.assignment(Var.getVar(e1), e1 + " + " + p);
                                                        Generador.goTo(tagFor);
                                                        Generador.label(((Tag)RESULT).getF());
													:}
			
						sent						{:
														Generador.goTo(tagTo);
														Generador.label(((Tag)RESULT).getV());
													:}

			|			FOR:tagFor exp:e1			{:
								
													:}

						DOWNTO:tagD exp:e2			{:
														Generador.label(tagFor);
														RESULT = Generador.condition(e1, Tag.MEQ, e2);
                                                        Generador.label(tagD);
													:}

						stepPart:p DO				{:
														Generador.assignment(Var.getVar(e1), e1 + " - " + p);
                                                        Generador.goTo(tagFor);
                                                        Generador.label(((Tag)RESULT).getF());
													:}

						sent						{:
														Generador.goTo(tagD);
														Generador.label(((Tag)RESULT).getV());
													:}

			|			FOR:tagFor forInIdent:e1	{:

													:}
	
						IN:tagIN forArray:e2 DO		{:
														RESULT = Generador.forIn(e1, tagFor, e2);
													:}	
			
						sent						{:
														Generador.goTo(tagFor);
														Generador.label(((Tag)RESULT).getF());
														Generador.label(tagIN);
								
													:}
			
			
		
			|			PRINT AP exp:e1 CP PYC		{: 
														Generador.print(e1); 
													:}

			|			AL 							{: 
														Var.upLevel(); 
													:}
			
						listaSent CL				{:
														Var.clear(Var.getLevel()); 
														Var.downLevel();
													:}

			|			tipo listaDec PYC			{: :}

			;	

forInIdent	::=			IDENT:i				{:
												RESULT = i;
											:}
		
			|	IDENT:i AC exp:e1 CC		{:
												RESULT = i + "[" + e1 + "]";
											:}
			;

stepPart	::=	STEP exp:e1					{:
												RESULT = e1;
											:}

			|								{:
												RESULT = "1";
											:}

			;

forArray	::=	IDENT:i				{:
								RESULT = i;
							:}
		
		|	AL arrayIni:l CL		{:
								RESULT = l;
							:}

		;

tipo            ::=     INT                             {:
								var = new Variable(Var.getLevel(), Variable.INTEGER); 
							:}
								
                |       FLOAT                           {: 
								var = new Variable(Var.getLevel(), Variable.REAL);
							:}
                ;

listaDec	::=	dec
		|	listaDec COMA dec
		;

dec		::=		IDENT:i ASIG exp:e1		{:
											Var.addVar(i, var);
											Generador.assignment(Var.getVar(i), e1);
										:}

		|		IDENT:i					{:	
											Var.addVar(i, var);
										:}

		| IDENT:i dimensiones:d ASIG exp:e1		{:
													var.setIsArray(true);
													var.setTam(new Integer(d));
													Var.addVar(i, var);
													Generador.assignment(Var.getVar(i), e1);
												:}

		|	IDENT:i dimensiones:d				{:
													var.setIsArray(true);
													var.setTam(new Integer(d));
													Var.addVar(i, var);
												:}
		;

dimensiones	::=		AC NUMERO:n CC 				{:
													ArrayList
													RESULT = n.toString();
												:}

		|	dimensiones:d AC NUMERO:n CC		{:
													RESULT = n.toString();
												:}
		;


elsePart 	::= 	ELSE sent
	   	|
	   	;

exp		::=	exp:e1 MAS exp:e2			{:	
											RESULT = Generador.arithmetic(e1, e2, Generador.MAS);
										:}

		|	exp:e1 MENOS exp:e2			{:
											RESULT = Generador.arithmetic(e1, e2, Generador.MENOS);
										:}

		|	exp:e1 POR exp:e2			{:
											RESULT = Generador.arithmetic(e1, e2, Generador.MULT);
										:}

		| 	exp:e1 DIV exp:e2			{:
											flagFloat = false;
											RESULT = Generador.arithmetic(e1, e2, Generador.DIV);
										:}

		|	exp:e1 MOD exp:e2			{:
											String t1 = Generador.arithmetic(e1, e2, Generador.DIV);
											String t2 = Generador.arithmetic(t1, e2, Generador.MULT);
											RESULT = Generador.arithmetic(e1, t2, Generador.MENOS);
										:}

		| 	MENOS exp:e1				{:
											RESULT = Generador.arithmetic("-" + e1, "", 0);
										:} %prec UMINUS
		
		| 	AP exp:e1 CP				{:
											RESULT = e1;
										:}

		|	casting:n					{: 
											RESULT = n; 
										:}

		|	incremento:i				{:
											RESULT = i;
										:}
		
		|	asig:a						{:
											RESULT = a;
										:}

		|	variable:v					{:
											RESULT = v;
										:}

		|	numero:n					{:
											RESULT = n;
										:}

		;

numero		::=		NUMERO:n				{:
												if(flagFloat){
													RESULT = Generador.casting(n.toString(), Variable.REAL);
												}
												else{
													RESULT = n.toString();
												}
											:}
		
		|		NUMEROF:n					{:
												RESULT = n.toString();
											:}
		;

asig 		::= 	IDENT:i ASIG exp:e1 				{:
															RESULT = Generador.assignment(Var.getVar(i), e1);
                                                        :}

		|		IDENT:i dimensionesAsig:a ASIG exp:e1	{:
															RESULT = Generador.assignment(Var.getVar(i), a, e1);
														:}

		|		IDENT:i ASIG AL arrayIni:a CL			{:
															Generador.arrayInit(i, a);
														:}

		;

dimensionesAsig ::=	AC exp:e CC			{:
								RESULT = e;
							:}

		|	dimensionesAsig:a AC exp:e CC	{:
								RESULT = e;
							:}

		;

arrayIni 	::=	exp:e				{:
								RESULT = new ArrayList<String>();
								RESULT.add(e);
							:}

		|	arrayIni:a COMA exp:e		{:
								a.add(e);
								RESULT = a;
							:}
		;

variable	::=	IDENT:i				{:
								if(Var.exists(i)){
                                                                        RESULT = Var.getVar(i);
                                                                }
                                                                else{
                                                                        Generador.error();
                                                                        Generador.halt();
                                                                }

							:}

		|	IDENT:i AC exp:e CC		{:
								if(Var.exists(i)){
									String aux = Generador.getTemp(Var.getLastVar(i).getTipo());
									Generador.assignment(aux , Var.getVar(i) + "[" + e + "]");
									RESULT = aux;
								}
								else{
									Generador.error();
									Generador.halt();
								}
							:}

		;

incremento	::=	MASMAS IDENT:i1                 {:
                                                                RESULT = Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " + " + "1");
                                                        :}

                |       IDENT:i1 MASMAS                 {:
                                                                String temp = Generador.getTemp(Var.getListVar(i1).get(Var.getListVar(i1).size()-1).getTipo());
                                                                Generador.assignment(temp, Var.getVar(i1));
                                                                Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " + " + "1");
                                                                RESULT = temp;
                                                        :}

                |       MENOSMENOS IDENT:i1             {:
                                                                RESULT = Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " - " + "1");
                                                        :}

                |       IDENT:i1 MENOSMENOS             {:
                                                                String temp = Generador.getTemp(Var.getListVar(i1).get(Var.getListVar(i1).size()-1).getTipo());
                                                                Generador.assignment(temp, Var.getVar(i1));
                                                                Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " - " + "1");
                                                                RESULT = temp;
                                                        :}
		;

casting 	::=	AP INT CP			{:
							:}
			
			exp:e				{:
								RESULT = Generador.casting(e, Variable.INTEGER);
							:}

		|	AP FLOAT CP			{:
								flagFloat = true;
							:}

			exp:e				{:
								if(flagFloat){
									RESULT = Generador.casting(e, Variable.REAL);
								}
								else{
									RESULT = e;
								}
								
							:}
		;

cond 		::=	exp:e1 EQ exp:e2		{:
								RESULT = Generador.condition(e1, Tag.EQ, e2);
							:}

		|	exp:e1 NEQ exp:e2		{:
								RESULT = Generador.condition(e1, Tag.NEQ, e2);
							:}

		| 	exp:e1 MEQ exp:e2		{:
								RESULT = Generador.condition(e1, Tag.MEQ, e2);
							:}

		|	exp:e1 MEOQ exp:e2		{:
								RESULT = Generador.condition(e1, Tag.MEOQ, e2);
							:}

		| 	exp:e1 MAQ exp:e2		{:
								RESULT = Generador.condition(e1, Tag.MAQ, e2);
							:}

		| 	exp:e1 MAOQ exp:e2		{:
								RESULT = Generador.condition(e1, Tag.MAOQ, e2);
							:}

		|	NOT cond:c			{:
								String temp = c.getV();
								c.setV(c.getF());
								c.setF(temp);
								RESULT = c;
							:}
	
		| 	cond:c1 AND			{:
								Generador.label(c1.getV());
							:}

			cond:c2				{:
								Generador.label(c1.getF());
								Generador.goTo(c2.getV());
								RESULT = c2;
							:}

		|	cond:c1 OR			{:
								Generador.label(c1.getF());
							:}

			cond:c2				{:
								Generador.label(c1.getV());
								Generador.goTo(c2.getF());
								RESULT = c2;
							:}

		|	AP cond:c CP			{:
								RESULT = c;
							:}
		;
